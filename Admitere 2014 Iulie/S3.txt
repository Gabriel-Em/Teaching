#include<iostream>
using namespace std;

void determinareNumereSir(int sir[], int lenSir)
{
	int i = 1;
	int nr = 0, d=1;

	while (i <= lenSir)
	{
		if (d <= nr/2)
		{
			if (nr%d == 0)
			{
				sir[i] = d;
				i++;
			}

			d++;
		}
		else
		{
			nr++;
			sir[i] = nr;
			i++;
			d = 2;
		}
	}
}


int primaCifra(int nr)
{
	while (nr > 9)
		nr = nr / 10;
	return nr;
}

int ultimaCifra(int nr)
{
	return nr % 10;
}

int cifraMaxima(int nr)
{
	int max = -1;

	while (nr > 0)
	{
		if (nr % 10 > max)
			max = nr % 10;
		nr = nr / 10;
	}

	return max;
}

void construireMatrice(int matrice[][10], int n, int sir[])
{
	for(int i =1;i<=n;i++)
		for (int j = 1; j <= n; j++)
		{
			if (i + j < n + 1) // deasupra diagonalei secundare
				matrice[i][j] = ultimaCifra(sir[n*n + i + j]);
			else
				if (i + j > n+1) // sub diagonala secundara
					matrice[i][j] = primaCifra(sir[n*n + i + j]);
				else
					matrice[i][j] = cifraMaxima(sir[n*n + i*i]);
		}
}

void insertionSort(int sir[], int lenSir)
{
	int aux, poz;

	for (int i = 1; i < lenSir; i++)
	{
		aux = sir[i];
		poz = i;

		while (poz > 0 && sir[poz - 1] < aux)
		{
			sir[poz] = sir[poz - 1];
			poz--;
		}

		sir[poz] = aux;
	}
}

long creeazaNumarDinArray(int array_[], int arrayLen)
{
	long nr = 0;
	for (int i = 0; i < arrayLen; i++)
		nr = nr * 10 + array_[i];

	return nr;
}

void determinareCMMNColoane(int matrice[][10], int n)
{
	int column[9];
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
			column[j-1] = matrice[j][i];

		insertionSort(column, n);
		cout << "Numarul maxim de pe coloana " << i << " este " << creeazaNumarDinArray(column, n) << endl;
	}
}

int main()
{
	int matrice[10][10], n,sir[163];

	cout << "n = ";
	cin >> n;
	determinareNumereSir(sir, n);
	construireMatrice(matrice, n, sir);
	determinareCMMNColoane(matrice, n);

	cout << endl << endl;
	system("pause");
	return 0;
}