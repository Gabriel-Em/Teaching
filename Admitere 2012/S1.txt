1. cautarea binara este un algoritm folosit pentru a gasi un element intr-o lista ordonata care functioneaza pe baza tehnicii divide et impera => vezi exemplul de mai jos

cautare secventiala intr-un sir ordonat

subalgoritm(X,n,k):
	i <- 0
	gasit <- 0
	gata <- 0
	Cat timp i < n si gata = 0 executa
		daca X[i] = k atunci
			gasit = 1
			gata = 1
		altfel
			daca X[i] > k atunci
				gata = 1
			altfel
				i <- i + 1
	sfCT

	Daca gasit = 1
		returneaza 1
	altfel
		returneaza 0

complexitate: O(n)

2. cautare binara intr-un si ordonat

subalgoritm(X,k,s,d):
	daca (s>d)
		return 0
	m <- s+d/2
	daca k > X[m] atunci
		subalgoritm(X,k,m+1,d)
	altfel
		daca k < X[m] atunci
			subalgoritm(X,k,s,m-1)
		altfel
			return 1

complexitate O(log2(n))

1 5 8 10 12 17 23 98 139
0 1 2 3  4  5  6  7  8

s = 0
d = 8

k = 8

m = 12
s = 0
d = 3

m = 5
s = 2
d = 3

m = 8 = k => GASIT

k = 15

m = 12
s = 5
d = 8

m = 23
s = 5
d = 5

m = 17
s = 5
d = 4

s>d => k NU EXISTA IN X

complexitate = de cate ori se executa cele mai influente blocuri de instructiuni intr-un algoritm

b. 
Parametrii formali = parametrii declarati in antetul unei functii care nu reprezinta valori concrete ci numai tin locul acestora. Ei se concretizeaza la executie prin apelurile functiei.
Parametrii efectivi = parametrii folositi la apelul unei functii, iar valorile lor vor fi atribuite parametrilor formali, la executia functiei

c.
Avand la dispozitie doua tablouri unidimensionale (doi vectori) care au elementele ordonate crescator (sau descrescator) ne punem problema construirii unui al treilea tablou care sa contina elementele primelor doua respectand acelasi criteriu de ordonare (crescator sau descrescator).

#include<iostream>
using namespace std;

void interclasare(int sir1[], int l1, int sir2[], int l2, int sir3[], int &l3)
{
	l3 = 0;
	int i=0, j=0;
	while (i < l1 && j < l2)
	{
		if (sir1[i] < sir2[j])
			sir3[l3++] = sir1[i++];
		else
			sir3[l3++] = sir2[j++];
	}


	for (int k = i; k < l1; k++)
		sir3[l3++] = sir1[k];

	for (int k = j; k < l2; k++)
		sir3[l3++] = sir2[k];
}
int main()
{
	int sir1[100], sir2[100], l1, l2, sir3[100], l3;

	cout << "l1 = ";
	cin >> l1;
	
	for (int i = 0; i < l1; i++)
	{
		cout << "sir1[" << i + 1 << "] = ";
		cin >> sir1[i];
	}

	cout << "l2 = ";
	cin >> l2;

	for (int i = 0; i < l2; i++)
	{
		cout << "sir2[" << i + 1 << "] = ";
		cin >> sir2[i];
	}

	interclasare(sir1, l1, sir2, l2, sir3, l3);

	cout << "sir 3 = ";
	for (int i = 0; i < l3; i++)
		cout << sir3[i] << " ";

	cout << endl << endl;
	system("pause");

	return 0;
}

O(n) unde n = l1 + l2