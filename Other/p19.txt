#include <iostream>
using namespace std;

void citire(int mat[][100], int &m, int &n)
{
	cout << "m = ";
	cin >> m;
	cout << "n = ";
	cin >> n;

	for (int i = 0; i < m; i++)
		for (int j = 0; j < n; j++)
		{
			cout << "mat[" << i << "][" << j << "] = ";
			cin >> mat[i][j];
		}
}


int determinareMax(int mat[][100], int m, int n, int dreptunghi)
{
	int max = -1;

	for (int i = dreptunghi; i < n - dreptunghi; i++) // parcurgem elementele de pe linia de sus si jos (din triunghiul D)
	{
		if (mat[dreptunghi][i] > max) // prima linie
			max = mat[dreptunghi][i];

		if (mat[m - 1 - dreptunghi][i] > max) // ultima linie
			max = mat[m - 1 - dreptunghi][i];
	}

	for (int i = dreptunghi + 1; i < m - dreptunghi - 1; i++)	// parcurgem elementele de pe prima si ultima coloana in afara de colturi (din triunghiul D)
	{
		if (mat[i][dreptunghi] > max)
			max = mat[i][dreptunghi];

		if (mat[i][n - 1 - dreptunghi] > max)
			max = mat[i][n - 1 - dreptunghi];
	}

	return max;
}

void construireX(int mat[][100], int m, int n, int X[], int &lenX)
{
	lenX = 0;

	int d = 0;

	while ((float)m / 2 > d && (float)n / 2 > d)	// cat timp mai exista dreptunghiuri neverificate
	{
		X[lenX++] = determinareMax(mat, m, n, d);
		d++;
	}
}

void afisare(int sir[], int lenSir)
{
	cout<<"(";

	for (int i = 0; i < lenSir;i++)
		cout << sir[i] << ", ";

	cout<<"\b\b)";
}

int main()
{
	int mat[100][100], m, n, X[100], lenX;

	citire(mat, m, n);
	construireX(mat, m, n, X, lenX);

	cout<<"X=";
	afisare(X, lenX);

	cout << endl << endl;
	system("pause");
	return 0;
}